// frontend-react/src/translations/data/en/signatures.ts
import type { SignatureTranslationSet } from '../../models/signatures';

export const signatureTranslationsEN: SignatureTranslationSet = {
  signaturesTitle: 'Signatures',
  signaturesDescription: 'Manage signature components and elements.',
  componentsTitle: 'Components',
  componentsDescription: 'Define hierarchical components (like folders) for signatures.',
  elementsTitle: 'Elements',
  elementsDescription: 'Manage individual elements within a signature component.',
  newComponentButton: 'New Component',
  newElementButton: 'New Element',
  componentNameLabel: 'Component Name',
  componentDescriptionLabel: 'Description',
  componentIndexTypeLabel: 'Index Formatting',
  indexTypeDecimal: 'Decimal (1, 2, 3...)',
  indexTypeRoman: 'Roman (I, II, III...)',
  indexTypeLowerLetter: 'Lowercase Letters (a, b, c...)',
  indexTypeUpperLetter: 'Uppercase Letters (A, B, C...)',
  componentElementsCountLabel: 'Elements',
  componentActionsColumn: 'Actions',
  reindexElementsButtonTooltip: 'Re-index Elements',
  editComponentButtonTooltip: 'Edit Component',
  deleteComponentButtonTooltip: 'Delete Component',
  confirmDeleteComponentTitle: 'Confirm Component Deletion',
  confirmDeleteComponentMessage: 'WARNING: Deleting a component will also delete ALL its elements and potentially break references. This cannot be undone. Are you sure?',
  confirmReindexComponentTitle: 'Confirm Re-index',
  confirmReindexComponentMessage: 'Re-indexing will recalculate indices for all elements in component ID {componentId}. Continue?',
  componentCreatedSuccess: 'Component created successfully.',
  componentUpdatedSuccess: 'Component updated successfully.',
  componentDeletedSuccess: 'Component deleted successfully.',
  componentReindexedSuccess: 'Component re-indexed successfully.',
  componentSaveFailedError: 'Failed to save component',
  componentDeleteFailedError: 'Failed to delete component',
  componentReindexFailedError: 'Failed to re-index component',
  noComponentsFound: 'No components created yet.',
  clickComponentToViewElements: 'Click a component to view its elements.',
  createComponentDialogTitle: 'Create New Component',
  editComponentDialogTitle: 'Edit Component',
  elementNameLabel: 'Element Name',
  elementDescriptionLabel: 'Description',
  elementIndexLabel: 'Index (Optional - Override Auto-Index)',
  elementIndexPlaceholder: 'Auto ({type})',
  elementIndexHint: 'Leave empty for automatic index based on component type.',
  elementParentElementsLabel: 'Parent Elements (Optional)',
  elementListComponentHeader: 'Component',
  elementListElementsHeader: 'Elements',
  elementListActionsHeader: 'Actions', // Already in common, remove if common is sufficient
  elementEditButtonTooltip: 'Edit Element',
  elementDeleteButtonTooltip: 'Delete Element',
  confirmDeleteElementTitle: 'Confirm Element Deletion',
  confirmDeleteElementMessage: 'Are you sure you want to delete this element? This may break references.',
  elementCreatedSuccess: 'Element "{name}" created.',
  elementUpdatedSuccess: 'Element updated successfully.',
  elementDeletedSuccess: 'Element deleted successfully.',
  elementSaveFailedError: 'Failed to save element',
  elementDeleteFailedError: 'Failed to delete element',
  noElementsFound: 'No elements found.',
  noElementsFoundInComponent: 'No elements found for this component.',
  clickCreateElementHint: 'Click "New Element".',
  createElementDialogTitle: 'Create New Element',
  editElementDialogTitle: 'Edit Element',
  backToComponentsButton: 'Back to Components',
  elementsForComponentTitle: 'Elements for: {componentName}',
  componentBadgeIndexType: 'Index Type: {type}',
  componentBadgeElementsCount: 'Elements: {count}',
  signaturePathSelectorLabel: 'Descriptive Signatures',
  addSignaturePathButton: 'Add Signature Path',
  elementBrowserPopoverCurrentPathLabel: 'Current Path:',
  elementBrowserPopoverSelectComponentPlaceholder: '1. Select Component...',
  elementBrowserPopoverSelectElementPlaceholder: '2. Select Element(s)...',
  elementBrowserPopoverAvailableElementsHeading: 'Available Elements',
  elementBrowserPopoverRemoveLastButton: 'Remove Last',
  elementBrowserPopoverAddPathButton: 'Add This Path',
  elementBrowserPopoverNoElementsFound: 'No elements found.',
  elementBrowserPopoverLoadingElements: 'Loading elements...',
  elementBrowserPopoverLoadingComponents: 'Loading components...',
  elementBrowserPopoverNoComponentsFound: 'No components found',
  elementBrowserSelectionModeLabel: 'Selection Mode',
  elementBrowserModeHierarchical: 'Hierarchical',
  elementBrowserModeFree: 'Free',
  elementBrowserModeHierarchicalHint: 'Select elements based on parent-child relationships.',
  elementBrowserModeFreeHint: 'Select elements from any component.',
  elementBrowserCreateElementButtonHint: 'Create New Element in "{componentName}"...',
  cannotCreateElementError: 'Cannot create element: Select a valid component first.',
  singlePathPickerPlaceholder: 'Click to select signature...',
  singlePathPickerLoading: 'Loading signature...',
  singlePathPickerClearTooltip: 'Clear signature',
  readOnly: 'Read-only',
  noDescription: 'No description',
  componentNoComponentsFound: 'No components found',
  elementHasParentsLabel: 'Has Parents',
  elementBrowserBuildPathHint: 'Build path by selecting elements...',
  elementBrowserSearchPlaceholder: 'Search elements by name or index...',
  elementBrowserSearchElements: 'Search elements',
  elementBrowserSelectElementFrom: 'Select element from "{name}"...',
  elementBrowserSelectElementIn: 'Select element in "{name}"...',
  elementBrowserSelectChildOf: 'Select child of "{name}"...',
  componentAdminRequiredError: 'Admin privileges required.',
  componentAuthTokenMissingError: 'Authentication token missing.',
  elementIndexAuto: 'Auto',
  invalidComponentIdError: 'Invalid component ID.',
  componentFetchByIdError: 'Failed to fetch component (ID: {id})',
  elementFetchPrereqError: 'Component ID or authentication token missing or invalid.',
  parentComponentNotLoadedWarning: 'Parent component not loaded.',
  elementDeletePrereqError: 'Parent component or authentication token missing.',
  elementLoadDetailsError: 'Failed to load element details',
  componentContextMissingError: 'Component context is missing.',
  elementNoChangesDetected: 'No changes detected.',
  elementSingularLabel: 'Element',
  signaturePathResolveError: 'Could not fully resolve signature path (element ID: {elementId} not found).',
  signaturePathInitialResolveError: 'Error resolving initial signature.',
  emptySignaturePlaceholder: 'Empty Signature',
  elementBrowserSelectComponentOptional: '1. Select Component (Optional)',
  elementBrowserSelectNextElement: '2. Select Next Component or Element',
  elementBrowserTooManyResultsHint: 'More elements may exist. Refine your search.',
  componentNoChangesFound: 'No changes detected.',
  parentComponentRefreshError: 'Failed to refresh parent component count.',
  componentSingularLabel: 'Component', // Added Key
  notAvailableAbbr: 'N/A',
  componentLoadFailedError: 'Failed to load components',
  elementLoadFailedError: 'Failed to load elements',
  componentNoChangesDetected: 'No changes detected.', // Added Key
  elementBrowserSelectComponentFirst: 'Select a component first to see elements.', // Added missing key
};