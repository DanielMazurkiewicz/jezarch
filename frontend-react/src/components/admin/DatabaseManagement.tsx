import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import LoadingSpinner from '@/components/shared/LoadingSpinner';
import ErrorDisplay from '@/components/shared/ErrorDisplay';
import { useAuth } from '@/hooks/useAuth';
import api from '@/lib/api';
import { toast } from "sonner";
import { Download, Upload, AlertTriangle } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const DatabaseManagement: React.FC = () => {
    const { token } = useAuth();
    const [backupLoading, setBackupLoading] = useState(false);
    const [restoreLoading, setRestoreLoading] = useState(false);
    const [backupError, setBackupError] = useState<string | null>(null);
    const [restoreError, setRestoreError] = useState<string | null>(null);
    const [restoreSuccessMessage, setRestoreSuccessMessage] = useState<string | null>(null);
    const [restoreInstructions, setRestoreInstructions] = useState<string | null>(null);
    const fileInputRef = useRef<HTMLInputElement>(null);

    const handleDownloadBackup = async () => {
        if (!token) return;
        setBackupLoading(true);
        setBackupError(null);
        try {
            const response = await api.backupDatabase(token); // Updated API call name

            // Check if the response is valid (e.g., a Blob)
            if (!(response instanceof Blob)) {
                 // Try to parse as JSON error if possible
                 try {
                     const errorJson = JSON.parse(await (response as any).text());
                     throw new Error(errorJson.message || 'Invalid backup response from server.');
                 } catch {
                     throw new Error('Received invalid backup response from server.');
                 }
            }

            // Create a URL for the blob
            const url = window.URL.createObjectURL(response);
            const a = document.createElement('a');
            a.href = url;

            // Extract filename from Content-Disposition header or use a default
            const contentDisposition = (response as any).headers?.get('content-disposition'); // This won't work directly, fetch needs manual header access
            // Since we can't easily get headers from the Blob response directly in the browser after fetch,
            // we rely on the filename generated by the backend (part of the URL if needed, or use a default)
            // Or, ideally, the backend endpoint itself returns the filename in a JSON response *before* download.
            // For now, let's use a generic name.
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            a.download = `jezarch-backup-${timestamp}.sqlite.db`; // Default filename

            document.body.appendChild(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(url); // Clean up the object URL
            toast.success("Database backup downloaded.");

        } catch (err: any) {
            const msg = err.message || "Failed to download database backup.";
            setBackupError(msg);
            toast.error(msg);
        } finally {
            setBackupLoading(false);
        }
    };

    const handleRestoreUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        if (!token || !event.target.files || event.target.files.length === 0) {
            return;
        }
        const file = event.target.files[0];

        // Basic file type check on the client side
        if (!file.name.endsWith('.db') && !file.name.endsWith('.sqlite') && !file.name.endsWith('.sqlite3')) {
             toast.error("Invalid file type. Please select a SQLite database file (.db, .sqlite, .sqlite3).");
             if (fileInputRef.current) fileInputRef.current.value = ""; // Clear input
             return;
         }

         // Confirmation dialog
         if (!window.confirm(`DANGER ZONE:\n\nRestoring will upload the file '${file.name}'.\n\nYou will need to MANUALLY stop the server, replace the database file, and restart the server afterwards.\n\nEnsure you have a working backup before proceeding.\n\nContinue with upload?`)) {
             if (fileInputRef.current) fileInputRef.current.value = ""; // Clear input if cancelled
             return;
         }

        setRestoreLoading(true);
        setRestoreError(null);
        setRestoreSuccessMessage(null);
        setRestoreInstructions(null);

        try {
            const response = await api.restoreDatabase(file, token); // Updated API call name
            setRestoreSuccessMessage(response.message);
            setRestoreInstructions(response.instructions);
            toast.success("Database file uploaded successfully. Follow instructions to complete restore.");
        } catch (err: any) {
            const msg = err.message || "Failed to upload database for restore.";
            setRestoreError(msg);
            toast.error(msg);
        } finally {
            setRestoreLoading(false);
            // Clear the file input after upload attempt
            if (fileInputRef.current) fileInputRef.current.value = "";
        }
    };

    // Trigger hidden file input click
    const triggerFileInput = () => {
        fileInputRef.current?.click();
    };

    return (
        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
             {/* Backup Card */}
             <Card className="bg-white dark:bg-white text-neutral-900 dark:text-neutral-900">
                 <CardHeader>
                     <CardTitle>Database Backup</CardTitle>
                     <CardDescription>Download a complete backup of the current application database.</CardDescription>
                 </CardHeader>
                 <CardContent className='space-y-4'>
                      {backupError && <ErrorDisplay message={backupError} />}
                     <Button onClick={handleDownloadBackup} disabled={backupLoading}>
                         {backupLoading ? <LoadingSpinner size="sm" className="mr-2" /> : <Download className="mr-2 h-4 w-4" />}
                         Download Backup File
                     </Button>
                     <p className='text-xs text-muted-foreground'>This will download the live database file. Store backups securely.</p>
                 </CardContent>
             </Card>

            {/* Restore Card */}
            <Card className="bg-white dark:bg-white text-neutral-900 dark:text-neutral-900 border-destructive">
                <CardHeader>
                     <CardTitle className='text-destructive flex items-center gap-2'><AlertTriangle className='h-5 w-5'/> Database Restore</CardTitle>
                     <CardDescription className='text-destructive'>Upload a database backup file. This is a critical operation and requires manual server restart.</CardDescription>
                </CardHeader>
                <CardContent className='space-y-4'>
                    {/* Hidden file input */}
                    <input
                        type="file"
                        ref={fileInputRef}
                        onChange={handleRestoreUpload}
                        accept=".db,.sqlite,.sqlite3" // Accept only SQLite extensions
                        style={{ display: 'none' }}
                        disabled={restoreLoading}
                     />
                    {/* Visible upload button */}
                     <Button onClick={triggerFileInput} disabled={restoreLoading} variant="destructive" className='w-full'>
                         {restoreLoading ? <LoadingSpinner size="sm" className="mr-2" /> : <Upload className="mr-2 h-4 w-4" />}
                         Select & Upload Restore File...
                     </Button>

                     {restoreError && <ErrorDisplay message={restoreError} />}

                     {restoreSuccessMessage && (
                         <Alert variant="default" className='border-orange-500 text-orange-800 bg-orange-50 dark:bg-orange-50'>
                             <AlertTriangle className="h-5 w-5 text-orange-600"/>
                             <AlertTitle className='font-semibold'>Upload Successful - Action Required!</AlertTitle>
                             <AlertDescription className='space-y-2'>
                                 <p>{restoreSuccessMessage}</p>
                                 <p className='font-semibold'>Follow these instructions carefully:</p>
                                 <pre className='text-xs whitespace-pre-wrap p-2 border bg-card rounded'>{restoreInstructions || 'Instructions missing.'}</pre>
                             </AlertDescription>
                         </Alert>
                     )}

                     <p className='text-xs text-destructive-foreground bg-destructive p-2 rounded'>
                        <strong>Warning:</strong> Restoring will replace the current database. Ensure you have uploaded the correct file. All current data will be overwritten once the restore process is manually completed by restarting the server with the replaced file.
                     </p>
                 </CardContent>
            </Card>
        </div>
    );
};

export default DatabaseManagement;